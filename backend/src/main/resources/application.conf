app {

  server {
    protocol = "http"
    domain = "flowdev.neoap.com"
    host = "10.1.29.248"
    port = 30387
  }

  http {
    interface = "0.0.0.0"
    port = 30388
  }

  client {
    appIds = [""]
    secureKeys = [""]
  }

  baiduAptoken = "24.ca50bece0b86124460a0b3a433c9083f.2592000.1596355291.282335-20097376"


}

dependence {

}

slick.db {
//  url = "jdbc:h2:file:/Users/wang/IdeaProjects/noron/data/noron" //本地测试时尽量修改为本机h2文件地址
 // url = "jdbc:h2:tcp://localhost//D:/GraduateWorks/noron/data/noron" //本地测试时尽量修改为本机h2文件地址
// url = "jdbc:h2:file:/Users/chenzhishuai/IdeaProjects/noron/data/noron"
   url = "jdbc:h2:file:/Users/gaohan/Downloads/work/noron/data/noron"

  user = "noron"
  password = "1qaz@WSX"
  maximumPoolSize = 3
  connectTimeout = 30000
  idleTimeout = 300000
  maxLifetime = 900000
}

session {

  cookie {
    name = "noron"
    domain = none
    path = "/"
    secure = false
    httpOnly = true
    maxAge = 1 days
  }
  encryptData = false
  serverSecret = "0gfmOdf34doi2dg-aj53Kelk4;ztymc23;r3r3l*m3^20M3;l20;[+Gfdyrtyr4sKrtsyhf92"

}


akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


  actor {


    my-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s

        # Define a fixed thread pool size with this property. The corePoolSize
        # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
        # value, if it is defined. Then the other pool-size properties will not
        # be used.
        #
        # Valid values are: `off` or a positive integer.
        fixed-pool-size = off

        # Min number of threads to cap factor-based corePoolSize number to
        core-pool-size-min = 16

        # The core-pool-size-factor is used to determine corePoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 100.0

        # Max number of threads to cap factor-based corePoolSize number to
        core-pool-size-max = 256

        # Minimum number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-min = 16

        # The max-pool-size-factor is used to determine maximumPoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor)
        # The maximumPoolSize will not be less than corePoolSize.
        # It is only used if using a bounded task queue.
        max-pool-size-factor = 100.0

        # Max number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-max = 256

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }

      throughput = 100
    }

  }

  http {
    parsing {
      max-content-length = 2g
    }
  }

}


